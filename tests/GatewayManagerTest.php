<?php


use Laratalks\PaymentGateways\Configs\Config;
use Laratalks\PaymentGateways\Configs\ProviderConfig;
use Laratalks\PaymentGateways\Configs\ProxyConfig;
use Laratalks\PaymentGateways\GatewayFactoryInterface;
use Laratalks\PaymentGateways\GatewayManager;
use Laratalks\PaymentGateways\Providers\ProviderInterface;
use Laratalks\PaymentGateways\Providers\Rest\UpalProvider;
use Laratalks\PaymentGateways\ValueObjects\PaymentNeeds;
use Laratalks\PaymentGateways\ValueObjects\PaymentRequestNeeds;
use Laratalks\PaymentGateways\ValueObjects\PaymentRequestResponse;
use Laratalks\PaymentGateways\ValueObjects\PaymentVerifyResponse;
use Symfony\Component\HttpFoundation\Request;

class GatewayManagerTest extends TestCase 
{
    protected $config;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
         
        $this->config = (new Config())
            ->addProvider(new ProviderConfig('upal', 'fknnfgloshgwl353dkvjdoif'))
            ->setDefaultProvider('')
            ->setProxy((new ProxyConfig()));

    }
    
    public function testCreateNewInstanceAndDefaultProvider()
    {
        $manager = new GatewayManager($this->config);
        
        $this->assertTrue($manager instanceof  GatewayFactoryInterface);
        $this->assertNull($manager->getDefaultProvider());

        $manager->setDefaultProvider('upal');

        $this->assertTrue($manager->getDefaultProvider() instanceof UpalProvider);
    }

    public function testExtend()
    {
        $manager = new GatewayManager($this->config);

        $this->assertNull($manager->provider('example'));

        $manager->extend('example', function () {
            return new ExampleProvider();
        });

        $this->assertTrue($manager->provider('example') instanceof ProviderInterface);
    }

    public function testMagicMethods()
    {
        $manager = new GatewayManager($this->config);


        $manager->extend('example', function () {
            return new ExampleProvider();
        });

        $manager->setDefaultProvider('example');
        
        $response  = $manager->callPaymentRequest(new \Laratalks\PaymentGateways\ValueObjects\PaymentRequestNeeds());
        $this->assertTrue($response instanceof PaymentRequestResponse);

    }

}


class ExampleProvider implements ProviderInterface
{

    public function getName()
    {
        return 'example';
    }


    public function callPaymentRequest(PaymentRequestNeeds $needs)
    {
        // call payment request and get response
        // you must  generate payment url
        // for redirecting customer to payment  gateway
        return new PaymentRequestResponse('PAYMENT_URL');
    }


    public function callVerifyRequest(PaymentNeeds $needs, Request $request = null)
    {
        // verify the payment and return response
        return new PaymentVerifyResponse('TRANSACTION_ID');
    }
}
<?php


use Laratalks\PaymentGateways\GatewayFactoryInterface;
use Laratalks\PaymentGateways\GatewayManager;
use Laratalks\PaymentGateways\Providers\ProviderInterface;
use Laratalks\PaymentGateways\Providers\Rest\PaylineProvider;

class GatewayManagerTest extends TestCase 
{
    protected $configs; 
    
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
         
        $this->configs = require __DIR__ . '/../config/payment-gateway.php';   
    }
    
    public function testCreateNewInstanceAndDefaultProvider()
    {
        $manager = new GatewayManager($this->configs);
        
        $this->assertTrue($manager instanceof  GatewayFactoryInterface);
        $this->assertNull($manager->getDefaultProvider());

        $manager->setDefaultProvider('payline');

        $this->assertTrue($manager->getDefaultProvider() instanceof PaylineProvider);
    }

    public function testExtend()
    {
        $manager = new GatewayManager($this->configs);

        $this->assertNull($manager->provider('example'));

        $manager->extend('example', function () {
            return new ExampleProvider();
        });

        $this->assertTrue($manager->provider('example') instanceof ProviderInterface);
    }

    public function testMagicMethods()
    {
        $manager = new GatewayManager($this->configs);


        $manager->extend('example', function () {
            return new ExampleProvider();
        });

        $manager->setDefaultProvider('example');
        
        $paymentResponse = $manager->callPaymentRequest(new \Laratalks\PaymentGateways\ValueObjects\PaymentRequestNeeds());
        $this->assertEquals($paymentResponse->get('payment_url'), 'PAYMENT_URL');

    }

}


class ExampleProvider implements ProviderInterface
{

    public function getName()
    {
        // TODO: Implement getName() method.
    }

    /**
     * @param \Laratalks\PaymentGateways\ValueObjects\PaymentRequestNeeds $needs
     * @return \Laratalks\PaymentGateways\ValueObjects\PaymentResponse
     */
    public function callPaymentRequest(\Laratalks\PaymentGateways\ValueObjects\PaymentRequestNeeds $needs)
    {
        return (new \Laratalks\PaymentGateways\ValueObjects\PaymentResponse())
            ->set('payment_url', 'PAYMENT_URL');
    }

    /**
     * @param \Laratalks\PaymentGateways\ValueObjects\PaymentNeeds $needs
     * @return mixed
     */
    public function callVerifyRequest(\Laratalks\PaymentGateways\ValueObjects\PaymentNeeds $needs)
    {
        // TODO: Implement callVerifyRequest() method.
    }
}